// 4 选择器嵌套（font\border之类）、属性嵌套（复用父类class）
// 6 变量(配合if\for\while使用) 运算（代替calc计算宽度的其中一种解决方案）
// 通过 #{} 插值语句可以在选择器或属性名中使用变量
// 7 7.3. @extend（复用一段样式）
.tip {
  text-align: center;
  $width: 1px + 1px !global;
  border: {
    color: white;
    width: $width;
    style: solid;
  }
    &:hover{
        text-decoration: underline; 
    }
    .error{
        border: $width solid red;
        background-color: #fdd;
        margin-top: 10px;
    }
    .seriousError {
        @extend .error;
        color: red;
    }
}
// 6.9. 变量定义 !default
$content: null;
$content: "Non-null content" !default;

// 8
// 8.2. @if
p:before {
    content: "字符串" + $content;
    @if 1 + 1 == 2 {
        font-family: sans- + "serif"; 
    }@else{
        font-family: null;
    }
}
// 8.3. @for
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}
// 8.4. @each
@each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
      background-image: url('/images/#{$animal}.png');
    }
}
// 8.5. @while
$i: 6;
@while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
}

// 9
// 9.1. 定义混合指令 @mixin
@mixin large-text {
    font: {
        family: Arial;
        size: 20px;
        weight: bold;
    }
    color: #ff0000;
}
// 9.2. 引用混合样式 @include
.page-title {
    @include large-text;
    padding: 4px;
    margin-top: 10px;
}
// 9.3. 参数
@mixin sexy-border($color, $width: 1in) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}
p { @include sexy-border(blue); }
h1 { @include sexy-border(blue, 2in); }
// 9.3.2. 参数变量...
// 参数变量也可以用在引用混合指令的时候 (@include)，与平时用法一样，将一串值列表中的值逐条作为参数引用：
@mixin colors($text, $background, $border) {
  color: $text;
  background-color: $background;
  border-color: $border;
}
$values: #ff0000, #00ff00, #0000ff;
.primary {
  @include colors($values...);
}
// 9.4. 向混合样式中导入内容 (Passing Content Blocks to a Mixin)
// 在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 @content 标志的地方：
@mixin apply-to-ie6-only {
  * html {
    @content;
  }
}
@include apply-to-ie6-only {
  #logo {
    background-image: url(/logo.gif);
  }
}

// 10. 函数指令
$grid-width: 40px;
$gutter-width: 10px;
@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}
#sidebar { width: grid-width(5); }

// sass内置函数：http://sass-lang.com/documentation/Sass/Script/Functions.html
// mixin和extend如何选择：
// 1.需要传递参数，选择mixin;
// 2.一组相关元素使用extend，不仅仅局限相关元素使用mixin更好；
// 3.extend编译后的CSS是DRY形式的；（先考虑序号在前的）